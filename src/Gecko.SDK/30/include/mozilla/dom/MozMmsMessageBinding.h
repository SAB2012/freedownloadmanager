/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#ifndef mozilla_dom_MozMmsMessageBinding_h__
#define mozilla_dom_MozMmsMessageBinding_h__

#include "js/RootingAPI.h"
#include "js/TypeDecls.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "nsIDOMFile.h"

class JSObject;
class nsIDOMBlob;

namespace mozilla {
namespace dom {

struct MmsAttachmentAtoms;
struct MmsDeliveryInfoAtoms;
class NativePropertyHooks;
class ProtoAndIfaceArray;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct MmsAttachment : public DictionaryBase
{
  nsRefPtr<nsIDOMBlob> mContent;
  nsString mId;
  nsString mLocation;

  MmsAttachment();

protected:
  explicit inline MmsAttachment(int )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  MmsAttachment(const MmsAttachment&) MOZ_DELETE;
  void operator=(const MmsAttachment) MOZ_DELETE;

  static bool
  InitIds(JSContext* cx, MmsAttachmentAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastMmsAttachment : public MmsAttachment
{
  inline FastMmsAttachment()
    : MmsAttachment(42)
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct MmsDeliveryInfo : public DictionaryBase
{
  nsString mDeliveryStatus;
  uint64_t mDeliveryTimestamp;
  nsString mReadStatus;
  uint64_t mReadTimestamp;
  nsString mReceiver;

  MmsDeliveryInfo();

  explicit inline MmsDeliveryInfo(const MmsDeliveryInfo& aOther)
  {
    *this = aOther;
  }

protected:
  explicit inline MmsDeliveryInfo(int )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  static bool
  InitIds(JSContext* cx, MmsDeliveryInfoAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const MmsDeliveryInfo& aOther);
};

namespace binding_detail {
struct FastMmsDeliveryInfo : public MmsDeliveryInfo
{
  inline FastMmsDeliveryInfo()
    : MmsDeliveryInfo(42)
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_MozMmsMessageBinding_h__
