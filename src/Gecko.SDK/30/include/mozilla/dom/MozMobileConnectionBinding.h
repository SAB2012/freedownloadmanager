/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#ifndef mozilla_dom_MozMobileConnectionBinding_h__
#define mozilla_dom_MozMobileConnectionBinding_h__

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct DOMCLIRStatusAtoms;
struct DOMMMIResultAtoms;
struct MozCallBarringOptionAtoms;
class NativePropertyHooks;
class ProtoAndIfaceArray;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct DOMCLIRStatus : public DictionaryBase
{
  Optional<uint16_t > mM;
  Optional<uint16_t > mN;

  DOMCLIRStatus();

  explicit inline DOMCLIRStatus(const DOMCLIRStatus& aOther)
  {
    *this = aOther;
  }

protected:
  explicit inline DOMCLIRStatus(int )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  static bool
  InitIds(JSContext* cx, DOMCLIRStatusAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const DOMCLIRStatus& aOther);
};

namespace binding_detail {
struct FastDOMCLIRStatus : public DOMCLIRStatus
{
  inline FastDOMCLIRStatus()
    : DOMCLIRStatus(42)
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct DOMMMIResult : public DictionaryBase
{
  JS::Value mAdditionalInformation;
  Optional<nsString > mServiceCode;
  Optional<nsString > mStatusMessage;

  DOMMMIResult();

protected:
  explicit inline DOMMMIResult(int )
    : mAdditionalInformation(JS::UndefinedValue())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  DOMMMIResult(const DOMMMIResult&) MOZ_DELETE;
  void operator=(const DOMMMIResult) MOZ_DELETE;

  static bool
  InitIds(JSContext* cx, DOMMMIResultAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastDOMMMIResult : public DOMMMIResult
{
  inline FastDOMMMIResult()
    : DOMMMIResult(42)
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct MozCallBarringOption : public DictionaryBase
{
  Optional<bool > mEnabled;
  Optional<nsString > mPassword;
  Optional<uint16_t > mProgram;
  Optional<uint16_t > mServiceClass;

  MozCallBarringOption();

  explicit inline MozCallBarringOption(const MozCallBarringOption& aOther)
  {
    *this = aOther;
  }

protected:
  explicit inline MozCallBarringOption(int )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  static bool
  InitIds(JSContext* cx, MozCallBarringOptionAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const MozCallBarringOption& aOther);
};

namespace binding_detail {
struct FastMozCallBarringOption : public MozCallBarringOption
{
  inline FastMozCallBarringOption()
    : MozCallBarringOption(42)
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_MozMobileConnectionBinding_h__
