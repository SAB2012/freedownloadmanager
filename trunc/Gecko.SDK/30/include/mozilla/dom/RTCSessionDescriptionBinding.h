/* THIS FILE IS AUTOGENERATED - DO NOT EDIT */

#ifndef mozilla_dom_RTCSessionDescriptionBinding_h__
#define mozilla_dom_RTCSessionDescriptionBinding_h__

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/CallbackInterface.h"
#include "mozilla/dom/Nullable.h"
#include "nsWeakReference.h"

namespace mozilla {
namespace dom {

class NativePropertyHooks;
class ProtoAndIfaceArray;
struct RTCSessionDescriptionInit;
struct RTCSessionDescriptionInitAtoms;
class mozRTCSessionDescription;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {


MOZ_BEGIN_ENUM_CLASS(RTCSdpType, uint32_t)
  Offer,
  Pranswer,
  Answer
MOZ_END_ENUM_CLASS(RTCSdpType)

namespace RTCSdpTypeValues {
extern const EnumEntry strings[4];
} // namespace RTCSdpTypeValues


struct RTCSessionDescriptionInit : public DictionaryBase
{
  nsString mSdp;
  Nullable<RTCSdpType > mType;

  RTCSessionDescriptionInit();

  explicit inline RTCSessionDescriptionInit(const RTCSessionDescriptionInit& aOther)
  {
    *this = aOther;
  }

protected:
  explicit inline RTCSessionDescriptionInit(int )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  static bool
  InitIds(JSContext* cx, RTCSessionDescriptionInitAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value");

  bool
  Init(const nsAString& aJSON);

  bool
  ToObject(JSContext* cx, JS::Handle<JSObject*> parentObject, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const RTCSessionDescriptionInit& aOther);
};

namespace binding_detail {
struct FastRTCSessionDescriptionInit : public RTCSessionDescriptionInit
{
  inline FastRTCSessionDescriptionInit()
    : RTCSessionDescriptionInit(42)
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace mozRTCSessionDescriptionBinding {

  typedef mozilla::dom::mozRTCSessionDescription NativeType;

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];
  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal);

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  const JSClass*
  GetJSClass();

  JSObject*
  Wrap(JSContext* aCx, JS::Handle<JSObject*> aScope, mozilla::dom::mozRTCSessionDescription* aObject, nsWrapperCache* aCache);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, JS::Handle<JSObject*> aScope, T* aObject)
  {
    return Wrap(aCx, aScope, aObject, aObject);
  }

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceArray& aProtoAndIfaceArray, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetProtoObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JS::Handle<JSObject*>
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

} // namespace mozRTCSessionDescriptionBinding



class mozRTCSessionDescriptionJSImpl : public CallbackInterface
{
public:
  explicit inline mozRTCSessionDescriptionJSImpl(JS::Handle<JSObject*> aCallback, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCallback, aIncumbentGlobal)
  {
  }

  void __Init(const RTCSessionDescriptionInit& descriptionInitDict, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  inline bool
  operator==(const mozRTCSessionDescriptionJSImpl& aOther) const
  {
    return CallbackInterface::operator==(aOther);
  }

  Nullable<RTCSdpType > GetType(ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  void GetSdp(nsString& aRetVal, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  void SetType(const Nullable<RTCSdpType >& arg, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  void SetSdp(const nsAString& arg, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);
};


class mozRTCSessionDescription MOZ_FINAL : public nsSupportsWeakReference,
                                           public nsWrapperCache
{
public:
  NS_DECL_CYCLE_COLLECTING_ISUPPORTS
  NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS(mozRTCSessionDescription)

private:
  nsRefPtr<mozRTCSessionDescriptionJSImpl> mImpl;
  nsCOMPtr<nsISupports> mParent;

public:
  mozRTCSessionDescription(JS::Handle<JSObject*> aJSImplObject, nsPIDOMWindow* aParent);

  nsISupports* GetParentObject() const;

  virtual JSObject* WrapObject(JSContext* aCx, JS::Handle<JSObject*> aScope) MOZ_OVERRIDE;

  static already_AddRefed<mozRTCSessionDescription> Constructor(const GlobalObject& global, JSContext* cx, const RTCSessionDescriptionInit& descriptionInitDict, ErrorResult& aRv);

  Nullable<RTCSdpType > GetType(ErrorResult& aRv, JSCompartment* aCompartment = nullptr) const;

  void SetType(const Nullable<RTCSdpType >& arg, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  void GetSdp(nsString& aRetVal, ErrorResult& aRv, JSCompartment* aCompartment = nullptr) const;

  void SetSdp(const nsAString& arg, ErrorResult& aRv, JSCompartment* aCompartment = nullptr);

  static bool
  _Create(JSContext* cx, unsigned argc, JS::Value* vp);
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_RTCSessionDescriptionBinding_h__
